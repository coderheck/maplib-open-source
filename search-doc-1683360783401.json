[{"title":"Settings","type":0,"sectionRef":"#","url":"/maplib-open-source/api/Settings","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Settings","url":"/maplib-open-source/api/Settings#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Settings","url":"/maplib-open-source/api/Settings#new","content":"This item only works when running on the client. Client &lt;/&gt; Settings.new() → ()   "},{"title":"GetSetting​","type":1,"pageTitle":"Settings","url":"/maplib-open-source/api/Settings#GetSetting","content":"&lt;/&gt; Settings:GetSetting(settingName: string) → any This function is used to get a map setting's value. "},{"title":"PlayerUI","type":0,"sectionRef":"#","url":"/maplib-open-source/api/PlayerUI","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"PlayerUI","url":"/maplib-open-source/api/PlayerUI#functions","content":" "},{"title":"LoadUI​","type":1,"pageTitle":"PlayerUI","url":"/maplib-open-source/api/PlayerUI#LoadUI","content":"&lt;/&gt; PlayerUI:LoadUI(gui: ScreenGui ) → ScreenGui  This function is used to load a ScreenGui instance. "},{"title":"Skills","type":0,"sectionRef":"#","url":"/maplib-open-source/api/Skills","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Skills","url":"/maplib-open-source/api/Skills#functions","content":" "},{"title":"ToggleSliding​","type":1,"pageTitle":"Skills","url":"/maplib-open-source/api/Skills#ToggleSliding","content":"&lt;/&gt; Skills:ToggleSliding(value: boolean) → nil This function is used to toggle the sliding function on or off. "},{"title":"Players","type":0,"sectionRef":"#","url":"/maplib-open-source/api/Players","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Players","url":"/maplib-open-source/api/Players#functions","content":" "},{"title":"GetPlayers​","type":1,"pageTitle":"Players","url":"/maplib-open-source/api/Players#GetPlayers","content":"&lt;/&gt; Players:GetPlayers() → () Used to return all players in the current match.  "},{"title":"GetPlayersInRadius​","type":1,"pageTitle":"Players","url":"/maplib-open-source/api/Players#GetPlayersInRadius","content":"unreleased &lt;/&gt; Players:GetPlayersInRadius( position: Vector3 , radius: number ) → {Player } This method is used to return players in the radius of the given position. "},{"title":"Basics of scripting in ROBLOX Studio and TRIA.os","type":0,"sectionRef":"#","url":"/maplib-open-source/docs/intro","content":"","keywords":""},{"title":"Booleans​","type":1,"pageTitle":"Basics of scripting in ROBLOX Studio and TRIA.os","url":"/maplib-open-source/docs/intro#booleans","content":"Boolean is an easy-to-understand data type which one has two values: true or false. Think of it like a light switch, there are only two states a light bulb can be which is on or off. In conditional statements, if a boolean isn't false or nil, Luau (the scripting language used for Studio) will evaluates the boolean as true.  "},{"title":"Strings​","type":1,"pageTitle":"Basics of scripting in ROBLOX Studio and TRIA.os","url":"/maplib-open-source/docs/intro#strings","content":"String is a data type used to store text data, such as letters, numbers and symbols. "},{"title":"MapLib","type":0,"sectionRef":"#","url":"/maplib-open-source/api/MapLib","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#properties","content":" "},{"title":"map​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#map","content":"This item is read only and cannot be modified. Read Only since 0.5 &lt;/&gt; MapLib.map: Model  This is the map model reference property of the MapLib.  "},{"title":"MapEnded​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#MapEnded","content":"since 0.5 &lt;/&gt; MapLib.MapEnded: RBXScriptSignal  This RBXScriptSignal is fired when a map ends. Example: MapLib.MapEnded:Connect(function() MapLib:Alert(&quot;The round has ended&quot;, Color3.new(0, 255, 0), 2.5) end)  "},{"title":"Functions​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#functions","content":" "},{"title":"Alert​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#Alert","content":"since 0.2.4 &lt;/&gt; MapLib:Alert( message: string, color: Color3 | string, length: number? ) → nil This method can be used to send an alert, these alerts can be customized by color and duration. Example: MapLib:Alert(&quot;Hello world!&quot;, Color3.new(255, 255, 255), 3) -- Creates an alert with the given message with the Color3 value which in this case is white and the message will last for 3 seconds. tip You can pass the color argument as string and it'll still work, just make sure to use the correct color name! MapLib:Alert(&quot;Hello world!&quot;, &quot;red&quot;, 3)   "},{"title":"ChangeMusic​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#ChangeMusic","content":"since 0.4 &lt;/&gt; MapLib:ChangeMusic( musicId: number, volume: number, startTick: number ) → nil This method can be used to change the current music playing in a map, this also replicates to spectators. Example: MapLib:ChangeMusic(12245541717, 1, 5) -- Changes the currently playing music at volume 1 and starts at 5 seconds in   "},{"title":"GetButtonEvent​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#GetButtonEvent","content":"This item only works when running on the server. Server since 0.2.4 &lt;/&gt; MapLib:GetButtonEvent(buttonId: number | string) → RBXScriptSignal?  This method can be used to run functions once a specific button has been pressed. Example: MapLib:GetButtonEvent(5):Connect(function(player: Player?) MapLib:Alert(&quot;Button 5 was pressed!&quot;, Color3.fromRGB(255, 255, 255), 4) end) -- When the 5th button is pressed an alert is sent saying &quot;Button 5 was pressed!&quot; which has the color white and lasts for 4 seconds. note The player value here is the player that pressed the button. tip Path buttons work the same as normal buttons, you just need to give a valid button ID in quotation marks (e.g. &quot;6A&quot;) Example: MapLib:GetButtonEvent(&quot;6A&quot;):Connect(function(player: Player?) MapLib:Alert(&quot;Button 6A was pressed!&quot;, Color3.fromRGB(255, 0, 0), 5) end)   "},{"title":"Survive​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#Survive","content":"This item only works when running on the server. Server since 0.8 &lt;/&gt; MapLib:Survive(player: Player ) → nil This method can be used to make a player survive the round without touching the ExitRegion. Example: script.Parent.Touched:Connect(function(other) local MapLib = game.GetMapLib:Invoke()() local player = game.Players:GetPlayerFromCharacter(other.Parent) if player then maplib:Survive(player) end end)   "},{"title":"SetLiquidType​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#SetLiquidType","content":"since 0.2.4 &lt;/&gt; MapLib:SetLiquidType( liquid: BasePart , liquidType: string ) → nil This method can be used to change the state of a liquid. There are 3 default types you can choose, these are water, acid and lava. Example: MapLib:SetLiquidType(map.Liquid1, &quot;lava&quot;) -- Changes the liquidType of map.Liquid1 to lava. tip You can make your own liquid type in your map's Settings.Liquids folder. For example a custom liquid type named &quot;bromine&quot; will have the usage: MapLib:SetLiquidType(map.LiquidWater, &quot;bromine&quot;)   "},{"title":"Move​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#Move","content":"since 0.9 &lt;/&gt; MapLib:Move( moveable: PVInstance , movement: Vector3 , duration: number ) → nil Used to move PVInstances (BaseParts, Models). Example: MapLib:Move(map.MovingPart1, Vector3.new(12, 0, 0), 3) -- Moves map.MovingPart1) with the increment along the X axis of +12 studs and finishes moving after 3 seconds note MapLib:MovePart() and MapLib:MoveModel() have been merged into MapLib:Move() for easier usage, the methods are kept for compatibility. they are used in relatively the same way except MapLib:MovePart() is used for moving BaseParts while MapLib:MoveModel() is used to move models. MapLib:MovePart(moveable: BasePart, movement: Vector3, duration: number) MapLib:MoveModel(moveable: Model, movement: Vector3, duration: number)   "},{"title":"MoveRelative​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#MoveRelative","content":"since 0.9 &lt;/&gt; MapLib:MoveRelative( moveable: PVInstance , movement: Vector3 , duration: number ) → nil Used to move PVInstances. Example: local maplib = game.GetMapLib:Invoke()() local map = maplib.map MapLib:Move(map.MovingPart2, Vector3.new(-12, 0, 0), 5) -- Moves the instance given (map.MovingPart2) with the increment along the X axis of -12 studs and finishes moving after 5 seconds note MapLib:MovePartLocal() and MapLib:MoveModelLocal() have been merged into MapLib:MoveRelative() for easier usage, the methods are kept for compatibility. They are used in relatively the same way except MapLib:MovePart() is used for moving BaseParts while MapLib:MoveModel() is used to move models. MapLib:MovePartLocal(moveable: BasePart, movement: Vector3, duration: number) MapLib:MoveModelLocal(moveable: Model, movement: Vector3, duration: number)   "},{"title":"GetPlayers​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#GetPlayers","content":"since 0.9 &lt;/&gt; MapLib:GetPlayers() → {Player } This method returns a table containing players currently in a map.  "},{"title":"GetFeature​","type":1,"pageTitle":"MapLib","url":"/maplib-open-source/api/MapLib#GetFeature","content":"since 0.5.6 &lt;/&gt; MapLib:GetFeature(name: string) → () This method is used to get any features listed in the features list. Example: MapLib:GetFeature(&quot;Players&quot;):GetPlayers() -- Returns players in a match  "}]