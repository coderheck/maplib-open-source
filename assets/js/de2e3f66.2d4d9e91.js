"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[415],{88273:e=>{e.exports=JSON.parse('{"functions":[{"name":"Alert","desc":"This method can be used to send an alert, these alerts can be customized by color and duration.\\n\\n**Example:**\\n```lua\\nMapLib:Alert(\\"Hello world!\\", Color3.new(255, 255, 255), 3)\\n-- Creates an alert with the given message with the Color3 value which in this case is white and the message will last for 3 seconds.\\n```\\n:::tip\\nYou can pass the color argument as string and it\'ll still work, just make sure to use the correct color name!\\n```lua\\nMapLib:Alert(\\"Hello world!\\", \\"red\\", 3)\\n:::","params":[{"name":"message","desc":"","lua_type":"string"},{"name":"color","desc":"","lua_type":"Color3 | string"},{"name":"length","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","since":"0.2.4","source":{"line":88,"path":"src/init.lua"}},{"name":"ChangeMusic","desc":"This method can be used to change the current music playing in a map, this also replicates to spectators.\\n\\n**Example:**\\n```lua\\nMapLib:ChangeMusic(12245541717, 1, 5)\\n-- Changes the currently playing music at volume 1 and starts at 5 seconds in","params":[{"name":"musicId","desc":"","lua_type":"number"},{"name":"volume","desc":"","lua_type":"number"},{"name":"startTick","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","since":"0.4","source":{"line":105,"path":"src/init.lua"}},{"name":"GetButtonEvent","desc":"This method can be used to run functions once a specific button has been pressed.\\n\\n**Example:**\\n```lua\\nMapLib:GetButtonEvent(5):Connect(function(player: Player?)\\n\\tMapLib:Alert(\\"Button 5 was pressed!\\", Color3.fromRGB(255, 255, 255), 4)\\nend)\\n-- When the 5th button is pressed an alert is sent saying \\"Button 5 was pressed!\\" which has the color white and lasts for 4 seconds.\\n```\\n:::note\\nThe **`player`** value here is the player that pressed the button.\\n:::\\n:::tip\\nPath buttons work the same as normal buttons, you just need to give a valid button ID in quotation marks (e.g. \\"6A\\")\\n\\n**Example:**\\n```lua\\nMapLib:GetButtonEvent(\\"6A\\"):Connect(function(player: Player?)\\n\\tMapLib:Alert(\\"Button 6A was pressed!\\", Color3.fromRGB(255, 0, 0), 5)\\nend)\\n```\\n:::","params":[{"name":"buttonId","desc":"","lua_type":"number | string"}],"returns":[{"desc":"","lua_type":"RBXScriptSignal?\\r\\n"}],"function_type":"method","realm":["Server"],"since":"0.2.4","source":{"line":139,"path":"src/init.lua"}},{"name":"Survive","desc":"This method can be used to make a player survive the round without touching the ExitRegion.\\n\\n**Example:**\\n```lua\\nscript.Parent.Touched:Connect(function(other)\\n\\tlocal MapLib = game.GetMapLib:Invoke()()\\n\\tlocal player = game.Players:GetPlayerFromCharacter(other.Parent)\\n\\tif player then \\n\\t\\tmaplib:Survive(player)\\n\\tend\\nend)","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","realm":["Server"],"since":"0.8","source":{"line":174,"path":"src/init.lua"}},{"name":"SetLiquidType","desc":"This method can be used to change the state of a liquid. There are 3 default types you can choose, these are **`water`**, **`acid`** and **`lava`**.\\n\\n**Example:**\\n```lua\\nMapLib:SetLiquidType(map.Liquid1, \\"lava\\")\\n-- Changes the liquidType of map.Liquid1 to lava.\\n```\\n:::tip\\nYou can make your own liquid type in your map\'s `Settings.Liquids` folder. For example a custom liquid type named \\"bromine\\" will have the usage:\\n```lua\\nMapLib:SetLiquidType(map.LiquidWater, \\"bromine\\")\\n```\\n:::","params":[{"name":"liquid","desc":"","lua_type":"BasePart"},{"name":"liquidType","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","since":"0.2.4","source":{"line":203,"path":"src/init.lua"}},{"name":"Move","desc":"Used to move PVInstances (BaseParts, Models).\\n\\n**Example:**\\n```lua\\nMapLib:Move(map.MovingPart1, Vector3.new(12, 0, 0), 3)\\n-- Moves map.MovingPart1) with the increment along the X axis of +12 studs and finishes moving after 3 seconds\\n```\\n:::note\\n`MapLib:MovePart()` and `MapLib:MoveModel()` have been merged into `MapLib:Move()` for easier usage, the methods are kept for compatibility. they are used in relatively the same way except `MapLib:MovePart()` is used for moving `BasePart`s while `MapLib:MoveModel()` is used to move `model`s.\\n```lua\\nMapLib:MovePart(moveable: BasePart, movement: Vector3, duration: number)\\nMapLib:MoveModel(moveable: Model, movement: Vector3, duration: number)\\n```\\n:::","params":[{"name":"moveable","desc":"","lua_type":"PVInstance"},{"name":"movement","desc":"","lua_type":"Vector3"},{"name":"duration","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","since":"0.9","source":{"line":262,"path":"src/init.lua"}},{"name":"MoveRelative","desc":"Used to move PVInstances.\\n\\n**Example:**\\n```lua\\nlocal maplib = game.GetMapLib:Invoke()()\\nlocal map = maplib.map\\nMapLib:Move(map.MovingPart2, Vector3.new(-12, 0, 0), 5)\\n-- Moves the instance given (map.MovingPart2) with the increment along the X axis of -12 studs and finishes moving after 5 seconds\\n```\\n:::note\\n`MapLib:MovePartLocal()` and `MapLib:MoveModelLocal()` have been merged into `MapLib:MoveRelative()` for easier usage, the methods are kept for compatibility. They are used in relatively the same way except `MapLib:MovePart()` is used for moving `BasePart`s while `MapLib:MoveModel()` is used to move `models`.\\n```lua\\nMapLib:MovePartLocal(moveable: BasePart, movement: Vector3, duration: number)\\nMapLib:MoveModelLocal(moveable: Model, movement: Vector3, duration: number)\\n```\\n:::","params":[{"name":"moveable","desc":"","lua_type":"PVInstance"},{"name":"movement","desc":"","lua_type":"Vector3"},{"name":"duration","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil\\r\\n"}],"function_type":"method","since":"0.9","source":{"line":285,"path":"src/init.lua"}},{"name":"GetPlayers","desc":"This method returns a table containing players currently in a map.","params":[],"returns":[{"desc":"","lua_type":"{Player}\\r\\n"}],"function_type":"method","since":"0.9","source":{"line":299,"path":"src/init.lua"}},{"name":"GetFeature","desc":"This method is used to get any features listed in the features list.\\n\\n**Example:**\\n```lua\\nMapLib:GetFeature(\\"Players\\"):GetPlayers()\\n-- Returns players in a match\\n```","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","since":"0.5.6","source":{"line":314,"path":"src/init.lua"}}],"properties":[{"name":"map","desc":"This is the map model reference property of the MapLib.","lua_type":"Model","since":"0.5","readonly":true,"source":{"line":39,"path":"src/init.lua"}},{"name":"MapEnded","desc":"This `RBXScriptSignal` is fired when a map ends.\\n\\n**Example:**\\n```lua\\nMapLib.MapEnded:Connect(function()\\n\\tMapLib:Alert(\\"The round has ended\\", Color3.new(0, 255, 0), 2.5)\\nend)\\n```","lua_type":"RBXScriptSignal","since":"0.5","source":{"line":53,"path":"src/init.lua"}},{"name":"_MapHandler","desc":"","lua_type":"any","private":true,"readonly":true,"source":{"line":58,"path":"src/init.lua"}}],"types":[],"name":"MapLib","desc":"This is the documentation of MapLib methods.","source":{"line":31,"path":"src/init.lua"}}')}}]);